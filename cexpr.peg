# Adapted from https://github.com/pointlander/peg/blob/master/grammars/c/c.peg

Expression = AssignmentExpression (COMMA AssignmentExpression)*

#
#FunctionDefinition <- DeclarationSpecifiers Declarator DeclarationList? CompoundStatement
#
#DeclarationList <- Declaration+
#
#
##-------------------------------------------------------------------------
##  A.2.2  Declarations
##-------------------------------------------------------------------------
#
#Declaration <- DeclarationSpecifiers InitDeclaratorList? SEMI #{}
#
#DeclarationSpecifiers
#   <- (( StorageClassSpecifier
#       / TypeQualifier
#       / FunctionSpecifier
#       )*
#       TypedefName
#       ( StorageClassSpecifier
#       / TypeQualifier
#       / FunctionSpecifier
#       )*
#      )     #{DeclarationSpecifiers}
#    / ( StorageClassSpecifier
#      / TypeSpecifier
#      / TypeQualifier
#      / FunctionSpecifier
#      )+    #{DeclarationSpecifiers}
#
#InitDeclaratorList <- InitDeclarator (COMMA InitDeclarator)* #{}
#
#InitDeclarator <- Declarator (EQU Initializer)? #{}
#
#StorageClassSpecifier
#   <- TYPEDEF
#    / EXTERN
#    / STATIC
#    / AUTO
#    / REGISTER
#    / ATTRIBUTE LPAR LPAR (!RPAR .)* RPAR RPAR
#
#TypeSpecifier
#   <- VOID
#    / CHAR
#    / SHORT
#    / INT
#    / LONG
#    / FLOAT
#    / DOUBLE
#    / SIGNED
#    / UNSIGNED
#    / BOOL
#    / COMPLEX
#    / StructOrUnionSpecifier
#    / EnumSpecifier
#
#StructOrUnionSpecifier
#   <- StructOrUnion
#      ( Identifier? LWING StructDeclaration* RWING
#      / Identifier
#      )
#
#StructOrUnion <- STRUCT / UNION
#
#StructDeclaration <- ( SpecifierQualifierList StructDeclaratorList? )? SEMI
#
#SpecifierQualifierList
#   <- ( TypeQualifier*
#        TypedefName
#        TypeQualifier*
#      )
#    / ( TypeSpecifier
#      / TypeQualifier
#      )+
#
#StructDeclaratorList <- StructDeclarator (COMMA StructDeclarator)*
#
#StructDeclarator
#   <- Declarator? COLON ConstantExpression
#    / Declarator
#
#EnumSpecifier
#    <- ENUM
#      ( Identifier? LWING EnumeratorList COMMA? RWING
#      / Identifier
#      )
#
#EnumeratorList <- Enumerator (COMMA Enumerator)*
#
#Enumerator <- EnumerationConstant (EQU ConstantExpression)?
#
#TypeQualifier
#   <- CONST
#    / RESTRICT
#    / VOLATILE
#    / DECLSPEC LPAR Identifier RPAR
#
#FunctionSpecifier <- INLINE / STDCALL
#
#Declarator <- Pointer? DirectDeclarator #{}
#
#DirectDeclarator
#   <- ( Identifier
#      / LPAR Declarator RPAR
#      )
#      ( LBRK TypeQualifier* AssignmentExpression? RBRK
#      / LBRK STATIC TypeQualifier* AssignmentExpression RBRK
#      / LBRK TypeQualifier+ STATIC AssignmentExpression RBRK
#      / LBRK TypeQualifier* STAR RBRK
#      / LPAR ParameterTypeList RPAR
#      / LPAR IdentifierList? RPAR
#      )* #{}
#
#Pointer <- ( STAR TypeQualifier* )+
#
#ParameterTypeList <- ParameterList (COMMA ELLIPSIS)?
#
#ParameterList <- ParameterDeclaration (COMMA ParameterDeclaration)*
#
#ParameterDeclaration
#   <- DeclarationSpecifiers
#      ( Declarator
#      / AbstractDeclarator
#      )?
#
#IdentifierList <- Identifier (COMMA Identifier)*
#
#TypeName <- SpecifierQualifierList AbstractDeclarator?
#
#AbstractDeclarator
#   <- Pointer? DirectAbstractDeclarator
#    / Pointer
#
#DirectAbstractDeclarator
#   <- ( LPAR AbstractDeclarator RPAR
#      / LBRK (AssignmentExpression / STAR)? RBRK
#      / LPAR ParameterTypeList? RPAR
#      )
#      ( LBRK (AssignmentExpression / STAR)? RBRK
#      / LPAR ParameterTypeList? RPAR
#      )*
#
#TypedefName <-Identifier #{&TypedefName}
#
#Initializer
#   <- AssignmentExpression
#    / LWING InitializerList COMMA? RWING
#
#InitializerList <- Designation? Initializer (COMMA Designation? Initializer)*
#
#Designation <- Designator+ EQU
#
#Designator
#   <- LBRK ConstantExpression RBRK
#    / DOT Identifier
#
#
##-------------------------------------------------------------------------
##  A.2.3  Statements
##-------------------------------------------------------------------------
#
#Statement
#   <- LabeledStatement
#    / CompoundStatement
#    / ExpressionStatement
#    / SelectionStatement
#    / IterationStatement
#    / JumpStatement
#
#LabeledStatement
#   <- Identifier COLON Statement
#    / CASE ConstantExpression COLON Statement
#    / DEFAULT COLON Statement
#
#CompoundStatement <- LWING ( Declaration / Statement )* RWING
#
#ExpressionStatement <- Expression? SEMI
#
#SelectionStatement
#   <- IF LPAR Expression RPAR Statement (ELSE Statement)?
#    / SWITCH LPAR Expression RPAR Statement
#
#IterationStatement
#   <- WHILE LPAR Expression RPAR Statement
#    / DO Statement WHILE LPAR Expression RPAR SEMI
#    / FOR LPAR Expression? SEMI Expression? SEMI Expression? RPAR Statement
#    / FOR LPAR Declaration Expression? SEMI Expression? RPAR Statement
#
#JumpStatement
#   <- GOTO Identifier SEMI
#    / CONTINUE SEMI
#    / BREAK SEMI
#    / RETURN Expression? SEMI
#
#
##-------------------------------------------------------------------------
##  A.2.1  Expressions
##-------------------------------------------------------------------------
#
PrimaryExpression = StringLiteral / Constant / PreprocessorDefined / Identifier / ( LPAR Expression RPAR )

# I've added this PreprocessorDefined rule so I can use this grammar to parse preprocessor "#if" expressions
PreprocessorDefined = DEFINED Identifier
DEFINED = "defined" !IdChar Spacing

#
#PostfixExpression
#   <- ( PrimaryExpression
#      / LPAR TypeName RPAR LWING InitializerList COMMA? RWING
#      )
#      ( LBRK Expression RBRK
#      / LPAR ArgumentExpressionList? RPAR
#      / DOT Identifier
#      / PTR Identifier
#      / INC
#      / DEC
#      )*
PostfixExpression = PrimaryExpression (
      (LBRK Expression RBRK)
    / (LPAR ArgumentExpressionList? RPAR)
    / (DOT Identifier)
    / (PTR Identifier)
    / INC
    / DEC
)*

ArgumentExpressionList = AssignmentExpression (COMMA AssignmentExpression)*

#
#UnaryExpression
#   <- PostfixExpression
#    / INC UnaryExpression
#    / DEC UnaryExpression
#    / UnaryOperator CastExpression
#    / SIZEOF (UnaryExpression / LPAR TypeName RPAR )
# TODO: support sizeof?
UnaryExpression = PostfixExpression / (INC UnaryExpression) / (DEC UnaryExpression) / (UnaryOperator CastExpression)

UnaryOperator = AND / STAR / PLUS / MINUS / TILDA / BANG

#CastExpression <- (LPAR TypeName RPAR CastExpression) / UnaryExpression
# TODO: implement this?
CastExpression = UnaryExpression / "CAST_EXPRESSION_PLACEHOLDER"


MultiplicativeExpression = CastExpression ((STAR / DIV / MOD) CastExpression)*
AdditiveExpression = MultiplicativeExpression ((PLUS / MINUS) MultiplicativeExpression)*
ShiftExpression = AdditiveExpression ((LEFT / RIGHT) AdditiveExpression)*
RelationalExpression = ShiftExpression ((LE / GE / LT / GT) ShiftExpression)*
EqualityExpression = RelationalExpression ((EQUEQU / BANGEQU) RelationalExpression)*
ANDExpression = EqualityExpression (AND EqualityExpression)*
ExclusiveORExpression = ANDExpression (HAT ANDExpression)*
InclusiveORExpression = ExclusiveORExpression (OR ExclusiveORExpression)*
LogicalANDExpression = InclusiveORExpression (ANDAND InclusiveORExpression)*
LogicalORExpression = LogicalANDExpression (OROR LogicalANDExpression)*

ConditionalExpression = LogicalORExpression (QUERY Expression COLON LogicalORExpression)*
#
#AssignmentExpression
#   <- UnaryExpression AssignmentOperator AssignmentExpression
#    / ConditionalExpression
# TODO: add support for the 1st subrule here?
AssignmentExpression = ConditionalExpression / "ASSIGNMENT_EXPRESSION_PLACEHOLDER"
#
#AssignmentOperator
#   <- EQU
#    / STAREQU
#    / DIVEQU
#    / MODEQU
#    / PLUSEQU
#    / MINUSEQU
#    / LEFTEQU
#    / RIGHTEQU
#    / ANDEQU
#    / HATEQU
#    / OREQU
#

#
#ConstantExpression <- ConditionalExpression
#
#
##-------------------------------------------------------------------------
##  A.1.1  Lexical elements
##  Tokens are: Keyword, Identifier, Constant, StringLiteral, Punctuator.
##  Tokens are separated by Spacing.
##-------------------------------------------------------------------------
#

#Spacing
#   <- ( WhiteSpace
#      / LongComment
#      / LineComment
#      / Pragma
#      )*
#Spacing = (WhiteSpace / LongComment / LineComment / Pragma )*
#Spacing = (WhiteSpace / LongComment)*
Spacing = (WhiteSpace / LongComment)*

WhiteSpace = ~"[ \n\r\t]"    # 7.4.1.10 [\u000B\u000C]

#LongComment <- '/*' (!'*/'.)* '*/'   # 6.4.9
LongComment = "/*" (!("*/") ALL)* "*/"      # 6.4.9

ALL = ~"."s

#
#LineComment <- '//' (!'\n' .)*       # 6.4.9
#
#Pragma      <- '#'  (!'\n' .)*       # Treat pragma as comment
#
#
##-------------------------------------------------------------------------
##  A.1.2  Keywords
##-------------------------------------------------------------------------
#
#AUTO      <- 'auto'      !IdChar Spacing
#BREAK     <- 'break'     !IdChar Spacing
#CASE      <- 'case'      !IdChar Spacing
#CHAR      <- 'char'      !IdChar Spacing
#CONST     <- 'const'     !IdChar Spacing
#CONTINUE  <- 'continue'  !IdChar Spacing
#DEFAULT   <- 'default'   !IdChar Spacing
#DOUBLE    <- 'double'    !IdChar Spacing
#DO        <- 'do'        !IdChar Spacing
#ELSE      <- 'else'      !IdChar Spacing
#ENUM      <- 'enum'      !IdChar Spacing
#EXTERN    <- 'extern'    !IdChar Spacing
#FLOAT     <- 'float'     !IdChar Spacing
#FOR       <- 'for'       !IdChar Spacing
#GOTO      <- 'goto'      !IdChar Spacing
#IF        <- 'if'        !IdChar Spacing
#INT       <- 'int'       !IdChar Spacing
#INLINE    <- 'inline'    !IdChar Spacing
#LONG      <- 'long'      !IdChar Spacing
#REGISTER  <- 'register'  !IdChar Spacing
#RESTRICT  <- 'restrict'  !IdChar Spacing
#RETURN    <- 'return'    !IdChar Spacing
#SHORT     <- 'short'     !IdChar Spacing
#SIGNED    <- 'signed'    !IdChar Spacing
SIZEOF = "sizeof" !IdChar Spacing
#STATIC    <- 'static'    !IdChar Spacing
#STRUCT    <- 'struct'    !IdChar Spacing
#SWITCH    <- 'switch'    !IdChar Spacing
#TYPEDEF   <- 'typedef'   !IdChar Spacing
#UNION     <- 'union'     !IdChar Spacing
#UNSIGNED  <- 'unsigned'  !IdChar Spacing
#VOID      <- 'void'      !IdChar Spacing
#VOLATILE  <- 'volatile'  !IdChar Spacing
#WHILE     <- 'while'     !IdChar Spacing
#BOOL      <- '_Bool'     !IdChar Spacing
#COMPLEX   <- '_Complex'  !IdChar Spacing
#STDCALL   <- '_stdcall'  !IdChar Spacing
#DECLSPEC  <- '__declspec' !IdChar Spacing
#ATTRIBUTE <- '__attribute__' !IdChar Spacing

Keyword = ("auto" / "break" / "case" / "char" / "const" / "continue" / "default" / "double" / "do" / "else" / "enum" / "extern" / "float" / "for" / "goto" / "if" / "int" / "inline" / "long" / "register" / "restrict" / "return" / "short" / "signed" / "sizeof" / "static" / "struct" / "switch" / "typedef" / "union" / "unsigned" / "void" / "volatile" / "while" / "_Bool" / "_Complex" / "_Imaginary" / "_stdcall" / "__declspec" / "__attribute__") !IdChar


#-------------------------------------------------------------------------
#  A.1.3  Identifiers
#  The standard does not explicitly state that identifiers must be
#  distinct from keywords, but it seems so.
#-------------------------------------------------------------------------
Identifier = !Keyword IdNondigit IdChar* Spacing
IdNondigit = ~"[a-zA-Z_]" / UniversalCharacter
IdChar = ~"[a-zA-Z0-9_]" / UniversalCharacter

#-------------------------------------------------------------------------
#  A.1.4  Universal character names
#-------------------------------------------------------------------------
UniversalCharacter = ("\\u" HexQuad) / ("\\U" HexQuad HexQuad)
HexQuad = HexDigit HexDigit HexDigit HexDigit

#-------------------------------------------------------------------------
#  A.1.5  Constants
#-------------------------------------------------------------------------

#Constant
#   <- FloatConstant
#    / IntegerConstant       # Note: can be a prefix of Float Constant!
#    / EnumerationConstant
#    / CharacterConstant
Constant = IntegerConstant / FloatConstant

#
#IntegerConstant
#   <- ( DecimalConstant
#      / HexConstant
#      / OctalConstant
#      )
#    IntegerSuffix? Spacing
# TODO: why does this end with Spacing?
# NOTE: if we don't have spacing, then 08 gets parsed as "0" and "8"
IntegerConstant = (DecimalConstant / HexConstant / OctalConstant) IntegerSuffix? Spacing

DecimalConstant = ~"[1-9][0-9]*"
OctalConstant = ~"0[0-7]*"
HexConstant = HexPrefix HexDigit+

HexPrefix = "0x" / "0X"
HexDigit = ~"[a-fA-F0-9]"

#IntegerSuffix
#   <- [uU] Lsuffix?
#    / Lsuffix [uU]?
IntegerSuffix = (~"[uU]" Lsuffix) / (Lsuffix ~"[uU]")

#
#Lsuffix
#   <- 'll'
#    / 'LL'
#    / [lL]
Lsuffix = "ll" / "LL" / "lL"

#
#FloatConstant
#   <- ( DecimalFloatConstant
#      / HexFloatConstant
#      )
#    FloatSuffix? Spacing
FloatConstant = "FLOAT_CONST_PLACEHOLDER"
#
#DecimalFloatConstant
#   <- Fraction Exponent?
#    / [0-9]+ Exponent
#
#HexFloatConstant
#   <- HexPrefix HexFraction BinaryExponent?
#    / HexPrefix HexDigit+ BinaryExponent
#
#Fraction
#   <- [0-9]* '.' [0-9]+
#    / [0-9]+ '.'
#
#HexFraction
#   <- HexDigit* '.' HexDigit+
#    / HexDigit+ '.'
#
#Exponent <- [eE][+\-]? [0-9]+
#
#BinaryExponent <- [pP][+\-]? [0-9]+
#
#FloatSuffix <- [flFL]
#
#EnumerationConstant <- Identifier
#
#CharacterConstant <- 'L'? ['] Char* ['] Spacing
#
#Char <- Escape / !['\n\\] .
#
Escape = SimpleEscape / OctalEscape / HexEscape / UniversalCharacter

#
#SimpleEscape <- '\\' ['\"?\\%abfnrtv]
SimpleEscape = "\\" ~r"['\"?\\%abfnrtv]"

#OctalEscape  <- '\\' [0-7][0-7]?[0-7]?
OctalEscape = "\\" ~"[0-7][0-7]?[0-7]?"

#HexEscape    <- '\\x' HexDigit+
HexEscape = "\\x" HexDigit+


#-------------------------------------------------------------------------
#  A.1.6  String Literals
#-------------------------------------------------------------------------

StringLiteral = "L"? ("\"" StringChar* "\"" Spacing)+

#StringChar <- Escape / ![\"\n\\] .
#StringChar = Escape / !(~"[\"\n\\]") ALL
StringChar = Escape / ~"[a-zA-Z ,!]"



#-------------------------------------------------------------------------
#  A.1.7  Punctuators
#-------------------------------------------------------------------------
LBRK       = "["             Spacing
RBRK       = "]"             Spacing
LPAR       = "("             Spacing
RPAR       = ")"             Spacing
#LWING     <-  '{'           Spacing
#RWING     <-  '}'           Spacing
DOT        = "."             Spacing
PTR        = "->"            Spacing
INC        = "++"            Spacing
DEC        = "--"            Spacing
AND        = "&" !"&"        Spacing
STAR       = "*" !"="        Spacing
PLUS       = "+" !~"[+=]"    Spacing
MINUS      = "-" !~"[\-=>]"  Spacing
TILDA      = "~"             Spacing
BANG       = "!" !"="        Spacing
DIV        = "/" !"="        Spacing
MOD        = "%" !~"[=>]"    Spacing
LEFT       = "<<" !"="       Spacing
RIGHT      = ">>" !"="       Spacing
LT         = "<"  !"="       Spacing
GT         = ">"  !"="       Spacing
LE         = "<="            Spacing
GE         = ">="            Spacing
EQUEQU     =  "=="           Spacing
BANGEQU    = "!="            Spacing
HAT        = "^" !"="        Spacing
OR         = "|" !"="        Spacing
ANDAND     = "&&"            Spacing
OROR       = "||"            Spacing
QUERY      = "?"             Spacing
COLON      = ":" !">"        Spacing
SEMI       = ';'             Spacing
#ELLIPSIS  <-  '...'         Spacing
#EQU       <-  '='  !"="     Spacing
#STAREQU   <-  '*='          Spacing
#DIVEQU    <-  '/='          Spacing
#MODEQU    <-  '%='          Spacing
#PLUSEQU   <-  '+='          Spacing
#MINUSEQU  <-  '-='          Spacing
#LEFTEQU   <-  '<<='         Spacing
#RIGHTEQU  <-  '>>='         Spacing
#ANDEQU    <-  '&='          Spacing
#HATEQU    <-  '^='          Spacing
#OREQU     <-  '|='          Spacing
COMMA      = ","             Spacing
#
#EOT       <-  !.
#
