#!/usr/bin/env python3
import os
import sys
import shutil
import json

import stringreader
import lex
import parse

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

class Header:
    def __init__(self, name, json_filename, header_filename, jsondata, type_refs, type_exports):
        self.name = name
        self.json_filename = json_filename
        self.header_filename = header_filename
        self.jsondata = jsondata
        self.type_refs = type_refs
        self.type_exports = type_exports
        self.imports = {}

# given a type from the json data, return the type name reference if there is one and it is not native
def addTypeRefs(type_refs, type):
    kind = type["kind"]
    if kind == "native":
        return
    if kind == "alias":
        type_refs[type["name"]] = True
    if kind == "singleptr" or kind == "arrayptr":
        return addTypeRefs(type_refs, type["subtype"])

def parseJson(json_filename):
    with open(json_filename, "r") as file:
        jsondata = json.load(file)
    type_refs = {}
    type_exports = {}
    #
    # find type_refs
    #
    for name, info in jsondata["constants"].items():
        addTypeRefs(type_refs, info["type"])
    for name, info in jsondata["types"].items():
        type_exports[name] = info
        kind = info["kind"]
        if kind == "typedef":
            addTypeRefs(type_refs, info["definition"])
        elif kind == "struct":
            for field in info["fields"]:
                addTypeRefs(type_refs, field["type"])
        else:
            assert(False)
    for name, info in jsondata["functions"].items():
        addTypeRefs(type_refs, info["return_type"])
        for arg in info["args"]:
            addTypeRefs(type_refs, arg["type"])
    return jsondata, type_refs, type_exports

def isVoid(type):
    return type["kind"] == "native" and type["name"] == "void"

# some types must write the name within the type (i.e. function pointers)
# so if there is a name, then it is needed while writing the type
# this function returns True if the name was written, false otherwise
def writeTypeRefAndNameIfRequired(out_file, type, name):
    kind = type["kind"]
    if kind == "native" or kind == "alias":
        out_file.write(type["name"])
        return False
    if kind == "singleptr" or kind == "arrayptr":
        if type["const"]:
            out_file.write("const ")
        name_written = writeTypeRefAndNameIfRequired(out_file, type["subtype"], name)
        out_file.write("*")
        return name_written

    assert(kind == "funcptr")
    writeTypeRefNoName(out_file, type["return_type"])
    out_file.write("(*{})(".format(name))
    prefix = ""
    for arg in type["args"]:
        out_file.write(prefix)
        writeTypeRefAndName(out_file, arg["type"], arg["name"])
        prefix = ", "
    out_file.write(")")
    return True

def writeTypeRefAndName(out_file, type, name):
    if not writeTypeRefAndNameIfRequired(out_file, type, name):
        out_file.write(" {}".format(name))

def writeTypeRefNoName(out_file, type):
    writeTypeRefAndNameIfRequired(out_file, type, "")

def generateHeader(header):
    print("generating: {}".format(header.header_filename))
    with open(header.header_filename, "w") as out_file:
        out_file.write('#ifndef __{}_header_guard__\n'.format(header.name))
        out_file.write('#define __{}_header_guard__\n'.format(header.name))
        out_file.write('#include <stdint.h>\n')
        out_file.write('#include <wchar.h>\n')
        out_file.write('#ifdef _WIN64\n')
        out_file.write('    typedef __int64 ssize_t;\n')
        out_file.write('    typedef unsigned __int64 size_t;\n')
        out_file.write('#elif _WIN32\n')
        out_file.write('    typedef __int32 ssize_t;\n')
        out_file.write('    typedef unsigned __int32 size_t;\n')
        out_file.write('#else\n')
        out_file.write('    #include <sys/types.h> // for ssize_t\n')
        out_file.write('#endif\n')
        # write typedefs
        for i in header.imports:
            out_file.write("#include <{}.h>\n".format(i.name))
        types = header.jsondata["types"].items()
        out_file.write("//\n")
        out_file.write("// typedefs\n")
        out_file.write("//\n")
        for name, info in types:
            kind = info["kind"]
            if kind == "typedef":
                out_file.write("typedef ")
                writeTypeRefAndName(out_file, info["definition"], name)
                out_file.write(";\n")
            elif kind == "struct":
                out_file.write("typedef struct {} {};\n".format(name, name))
            else:
                assert(False)
        constants = header.jsondata["constants"].items()
        if len(constants) > 0:
            out_file.write("//\n")
            out_file.write("// constants\n")
            out_file.write("//\n")
            for name, info in constants:
                type = info["type"]
                if isVoid(type):
                    out_file.write("#define {} {}\n".format(name, info["value"]))
                else:
                    out_file.write("#define {} ((".format(name))
                    writeTypeRefNoName(out_file, type)
                    out_file.write("){})\n".format(info["value"]))
        out_file.write("//\n")
        out_file.write("// structs\n")
        out_file.write("//\n")
        for name, info in types:
            kind = info["kind"]
            if kind == "typedef":
                continue
            elif kind == "struct":
                out_file.write("struct {} {{\n".format(name))
                for field in info["fields"]:
                    out_file.write("    ")
                    writeTypeRefAndName(out_file, field["type"], field["name"])
                    out_file.write(";\n")
                out_file.write("};\n")
            else:
                assert(False)
        functions = header.jsondata["functions"].items()
        if len(functions) > 0:
            out_file.write("//\n")
            out_file.write("// functions\n")
            out_file.write("//\n")
            for name, info in functions:
                writeTypeRefNoName(out_file, info["return_type"])
                out_file.write(" {}(".format(name))
                prefix = ""
                for arg in info["args"]:
                    out_file.write("{}\n    ".format(prefix))
                    writeTypeRefAndName(out_file, arg["type"], arg["name"])
                    prefix = ","
                out_file.write("\n);\n")
        out_file.write('#endif // __{}_header_guard__\n'.format(header.name))

def main():
    out_dir = os.path.join(SCRIPT_DIR, "out", "c")
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)
    os.makedirs(out_dir)

    json_dir = os.path.join(SCRIPT_DIR, "out", "json")
    headers = []
    for entry_basename in os.listdir(json_dir):
        assert(entry_basename.endswith(".json"))
        json_filename = os.path.join(json_dir, entry_basename)
        name = entry_basename[:-5]
        header_filename = os.path.join(out_dir, name + ".h")
        jsondata, type_refs, type_exports = parseJson(json_filename)
        headers.append(Header(name, json_filename, header_filename, jsondata, type_refs, type_exports))

    # create global type table
    global_type_exports = {}
    for header in headers:
        for type_export in header.type_exports:
            conflict = global_type_exports.get(type_export, None)
            if conflict:
                sys.exit("Error: type conflict (TODO: print more info)")
            global_type_exports[type_export] = header

    # resolve type_refs
    for header in headers:
        for type_ref in header.type_refs:
            if type_ref in header.type_exports:
                continue
            need = global_type_exports.get(type_ref, None)
            if not need:
                sys.exit("Error: undefined type '{}' appears in '{}'".format(type_ref, header.json_filename))
            header.imports[need] = True

    for header in headers:
        generateHeader(header)

main()
